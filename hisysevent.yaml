#  Copyright (c) 2022 Huawei Device Co., Ltd.
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#####################################################
#     below is the format of defining event         #
#####################################################
#domain: domain name.  [Only one domain name can be defined at the top]
#
#author: the author name who defined this event.
#date: the date when this event was defined, format is YYYY-MM-DD.
#logged: source file which refer to this event.
#usage: the usage of this event.
#//Define event name and event properties.
#@EVENT_NAME: the event definition part begin.
#  // __BASE is used for defining the basic info of the event.
#  // "type" optional values are: FAULT, STATISTICS, SECURITY, BEHAVIOR.
#  // "level" optional values are: CRITICAL, MINOR.
#  // "tag" set tags with may used by subscriber of this event, multiple tags devided by space.
#  // "desc" full description of this event.
#  @PARAMETER: {type: parameter type, arrsize: array length(optional), desc: parameter description}.
#  // follow the __BASE block, each line defines a parameter of this event.
#  // "type" optional values are: INT8, UINT8, INT16, UINT16, INT32, UINT32, INT64, UINT64, FLOAT, DOUBLE, STRING.
#  // "arrsize" of the parameter is an array, set a non-zero value.
#  // "desc" full description of this parameter.

#####################################################
#           SoftBus hisysevent definition           #
#####################################################

domain: DSOFTBUS

DISC_STARTUP:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: start discovery}
  PACKAGE_NAME: {type: STRING, desc: the appname which call softbus }

FIRST_DISC_DURATION:
  __BASE: {type: STATISTIC, level: MINOR, desc: first discovery device duration}
  MEDIUM: {type: UINT8, desc: discovery medium }
  MAX_DISC_DURATION: {type: UINT32, desc: max discovery time duration }
  MIN_DISC_DURATION: {type: UINT32, desc: min discovery time duration }
  AVG_DISC_DURATION: {type: UINT32, desc: average discovery time duration }

SCAN_TIMES:
  __BASE: {type: STATISTIC, level: MINOR, desc: stastistic scan times }
  MEDIUM: {type: UINT8, desc: scan medium }
  SCAN_COUNTER: {type: UINT32, desc: scan counter}

DISC_FAULT:
  __BASE: {type: STATISTIC, level: CRITICAL, desc: statistic all the exception in disc process }
  MEDIUM: {type: UINT8, desc: disc medium }
  ERROR_CODE: {type: INT32, desc: error code }
  ERROR_COUNTER: {type: UINT32, desc: error counter }

CONN_DURATION:
  __BASE: {type: STATISTIC, level: MINOR, desc: statistic the connection duration}
  MEDIUM: {type: UINT8, desc: connection medium }
  MAX_CONN_DURATION: {type: UINT32, desc: max connection time duration }
  MIN_CONN_DURATION: {type: UINT32, desc: min connection time duration }
  AVG_CONN_DURATION: {type: UINT32, desc: average connection time duration }

CONN_SUCC_RATE:
  __BASE: {type: STATISTIC, level: MINOR, desc: stastistic connect success rate }
  MEDIUM: {type: UINT8, desc: connection medium }
  SUCC_TIMES: {type: UINT32, desc: conn success times }
  FAIL_TIMES: {type: UINT32, desc: conn fail times }
  SUCC_RATE: {type: FLOAT, desc: connection success rate}

CONN_FAULT:
  __BASE: {type: FAULT, level: CRITICAL, desc: report the fault of connection }
  MEDIUM: {type: UINT8, desc: connection medium }
  ERROR_CODE: {type: INT32, desc: error code }

TRANS_OPEN_SESSION_CNT:
  __BASE: {type: STATISTIC, level: MINOR, desc: the success count and the fail count of open session }
  SUCCESS_CNT: {type: UINT32, desc: the success count of open session }
  FAIL_CNT: {type: UINT32, desc: the fail count of open session }
  SUCCESS_RATE: {type: FLOAT, desc: the success rate of open session }

TRANS_OPEN_SESSION_TIME_COST:
  __BASE: {type: STATISTIC, level: MINOR, desc: the time comsuming of open session }
  MAX_TIME_COST: {type: UINT32, desc: the max time comsuming of open session }
  MIN_TIME_COST: {type: UINT32, desc: the min time comsuming of open session }
  AVE_TIME_COST: {type: UINT32, desc: the average time comsuming of open session }
  TIMES_UNDER_500MS: {type: UINT32, desc: the times unders 500ms of open session }
  TIMES_BETWEEN_500MS_1S: {type: UINT32, desc: the times between 500ms to 1s of open session }
  TIMES_BETWEEN_1S_2S: {type: UINT32, desc: the times between 1s to 2s of open session }
  TIMES_ABOVE_2S: {type: UINT32, desc: the times above 2s of open session }

TRANS_FAULT:
  __BASE: {type: FAULT, level: CRITICAL, desc: the transmission fail }
  ERROR_CODE: {type: INT32, desc: error code }

BUS_CENTER_FAULT_EVT:
  __BASE: {type: FAULT, level: CRITICAL, desc: bus center all the exception}
  MODULE_TYPE: {type: UINT32, desc: module type}
  LINK_TYPE: {type: UINT32, desc: connection type}
  CHANNEL_QUALITY: {type: FLOAT, desc: channel quality}
  ERROR_CODE: {type: UINT32, desc: error code}
  PEER_DEVICE_TYPE: {type: UINT32, desc: peer device type}
  ONLINE_DEVICE_NUM: {type: UINT32, desc: online device count}
  CONNECTION_NUM: {type: UINT32, desc: connected device count}
  NIGHT_MODE: {type: UINT32, desc: night mode}
  WIFI_STATUS: {type: UINT32, desc: wifi status}
  BLUETOOTH_STATUS: {type: UINT32, desc: bluetooth status}
  CALLER_APP_MODE: {type: UINT32, desc: caller app mode}
  SUB_ERROR_CODE: {type: UINT32, desc: sub error code}
  CONN_BR_NUM: {type: UINT32, desc: the count of device connected by br}
  CONN_BLE_NUM: {type: UINT32, desc: the count of device connected by ble}
  BLUETOOTH_BROADCAST_STATUS: {type: BOOL, desc: bluetooth broadcast status}
  BLUETOOTH_SCAN_STATUS: {type: BOOL, desc: bluetooth scan status}
  BUSUNINESS_NAME: {type: STRING, desc: caller business name}
  CALLER_PACKAGE_NAME: {type: STRING, desc: caller package name}
  REMOTE_BIZ_TRUNCATED_UUID: {type: STRING, desc: remote biz truncated uuid}
  SOFT_BUS_VERSION: {type: STRING, desc: softbus version}
  PACKAGE_VERSION: {type: STRING, desc: softbus package version}

ONLINE_DURATION:
  __BASE: {type: STATISTIC, level: MINOR, desc: the time comsuming of online}
  TOTAL_TIME: {type: UINT64, desc: device online total time}
  TOTAL_COUNT: {type: UINT32, desc: device online total count}
  COUNT1: {type: UINT32, desc: the times above 10s of online}
  COUNT2: {type: UINT32, desc: the times above 30s of online}
  COUNT3: {type: UINT32, desc: the times above 5min of online}
  COUNT4: {type: UINT32, desc: the times above 10min of online}
  COUNT5: {type: UINT32, desc: the times above 15min of online}
  SOFT_BUS_VERSION: {type: STRING, desc: softbus version}
  PACKAGE_VERSION: {type: STRING, desc: softbus package version}

AUTH_DURATION:
  __BASE: {type: STATISTIC, level: MINOR, desc: stastistic auth rate and time cost}
  LINK_TYPE: {type: UINT32, desc: connection type}
  TOTAL_TIME: {type: UINT64, desc: the total time cost of auth}
  TOTAL_COUNT: {type: UINT32, desc: device auth total count}
  COUNT1: {type: UINT32, desc: the times above 2000ms of single auth}
  COUNT2: {type: UINT32, desc: the times above 2500ms of single auth}
  COUNT3: {type: UINT32, desc: the times above 3000ms of single auth}
  COUNT4: {type: UINT32, desc: the times above 3500ms of single auth}
  COUNT5: {type: UINT32, desc: the times above 4000ms of single auth}
  FAIL_TOTAL_COUNT: {type: UINT32, desc: auth failed total count}
  FAIL_TOTAL_TIME: {type: UINT64, desc: auth failed total time}
  CONNECT_FAIL_TOTAL_COUNT: {type: UINT32, desc: connect failed total count}
  AUTH_FAIL_TOTAL_COUNT: {type: UINT32, desc: auth failed total count}
  EXCHANGE_FAIL_TOTAL_COUNT: {type: UINT32, desc: exchange info failed total count}
  SOFT_BUS_VERSION: {type: STRING, desc: softbus version}
  PACKAGE_VERSION: {type: STRING, desc: softbus package version}

BUS_CENTER_DURATION:
  __BASE: {type: STATISTIC, level: MINOR, desc: stastistic bus center lnn duration}
  LINK_TYPE: {type: UINT32, desc: connection type}
  TOTAL_TIME: {type: UINT64, desc: the total time cost of lnn}
  TOTAL_COUNT: {type: UINT32, desc: lnn total count}
  COUNT1: {type: UINT32, desc: the times above 800ms of single lnn}
  COUNT2: {type: UINT32, desc: the times above 1000ms of single lnn}
  COUNT3: {type: UINT32, desc: the times above 1200ms of single lnn}
  COUNT4: {type: UINT32, desc: the times above 1500ms of single lnn}
  COUNT5: {type: UINT32, desc: the times above 1800ms of single lnn}
  SOFT_BUS_VERSION: {type: STRING, desc: softbus version}
  PACKAGE_VERSION: {type: STRING, desc: softbus package version}

DEVICE_ONLINE_EVT:
  __BASE: {type: STATISTIC, level: MINOR, desc: report the online device info}
  ONLINE_DEVICE_NUM: {type: UINT32, desc: online device count}
  BT_ONLINE_DEVICE_NUM: {type: UINT32, desc: online device count connection medium is bt}
  WIFI_ONLINE_DEVICE_NUM: {type: UINT32, desc: online device count connection medium is wifi}
  PEER_DEVICE_TYPE: {type: UINT32, desc: peer device type}
  INSERT_PROFILE_RESULT: {type: UINT32, desc: the result of insert device info to profile}
  PEER_SOFT_BUS_VERSION: {type: STRING, desc: softbus version of peer device}
  PEER_DEVICE_NAME: {type: STRING, desc: device name of peer device}
  SOFT_BUS_VERSION: {type: STRING, desc: softbus version of local device}
  PEER_PACKAGE_VERSION: {type: STRING, desc: softbus package version of peer device}
  PACKAGE_VERSION: {type: STRING, desc: softbus package version of local device}

DEVICE_DISCOVERY:
  __BASE: {type: STATISTIC, level: MINOR, desc: stastistic device discovery count}
  START_DISCOVERY_COUNT: {type: UINT64, desc: start discovery count}
  SEND_BROADCAST_COUNT: {type: UINT64, desc: send broadcast count}
  RECEIVE_BROADCAST_COUNT: {type: UINT64, desc: receiver broadcast count}
  DEVICE_FOUND_COUNT: {type: UINT64, desc: device found count}
  BUSINESS_DISCOVERY_COUNT: {type: UINT64, desc: business discovery count}
  BUSINESS_DISCOVERY_DETAIL: {type: STRING, desc: business discovery detail info}
  SOFT_BUS_VERSION: {type: STRING, desc: softbus version}
  PACKAGE_VERSION: {type: STRING, desc: softbus package version}

APP_DISCOVERY:
  __BASE: {type: STATISTIC, level: MINOR, desc: stastistic app discovery count}
  APP_NAME: {type: STRING, desc: name of app who discovery device}
  APP_DISCOVERY_COUNT: {type: UINT32, desc: app discovery count}

DFILE_WAIT_HEADER_TIMEOUT_EVT:
  __BASE: {type: FAULT, level: CRITICAL, desc: wait file header time out}
  ERROR_CODE: {type: STRING, desc: error code}

DFILE_SERVER_CREATE_EVT:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: server created}

DFILE_CLIENT_CREATE_EVT:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: client created}

DFILE_SEND_BEGIN_EVT:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: send begin}

DFILE_PEER_SHUTTED_EVT:
  __BASE: {type: FAULT, level: CRITICAL, desc: peer shutted}

DFILE_TRANS_COMPLETE_EVT:
  __BASE: {type: STATISTIC, level: MINOR, desc: transfer complete}
  TRANSRATE: {type: STRING, desc: transmission speed}

DFILE_ACCEPT_SOCKET_EVT:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: accept socket}

FILLP_LINK_EVT:
  __BASE: {type: FAULT, level: MINOR, desc: fillp link disconnect}
  SOCK_IDX: {type: UINT32, desc: fillp socket index}
  LINK_EVT_TYPE: {type: UINT8, desc: fillp link event type}

FILLP_PKT_EVT:
  __BASE: {type: STATISTIC, level: MINOR, desc: fillp data package event}
  SOCK_IDX: {type: UINT32, desc: fillp socket index}
  PKT_EVT_TYPE: {type: UINT8, desc: fillp package event type}
  DROP_CNT: {type: UINT32, desc: fillp package dropcnt}

FILLP_SOCK_QOS_EVT:
  __BASE: {type: STATISTIC, level: MINOR, desc: fillp socket Qos event}
  SOCK_IDX: {type: UINT32, desc: fillp socket index}
  RTT: {type: UINT32, desc: fillp socket rtt}
  TOTAL_RECV_PKT: {type: UINT32, desc: fillp socket recv package num}
  TOTAL_RECV_BYTES: {type: UINT32, desc: fillp socket recv bytes}
  TOTAL_SEND_PKT: {type: UINT32, desc: fillp socket send package num}
  TOTAL_SEND_BYTES: {type: UINT32, desc: fillp socket send bytes}
  JITTER: {type: UINT32, desc: fillp socket jitter}

DFINDER_STATS:
  __BASE: {type: STATISTIC, level: MINOR, desc: dfinder statistics}
  INVALID_OPTION_CNT: {type: UINT64, desc: the count of invalid option}
  BUILD_PKT_FAIL_CNT: {type: UINT64, desc: the count when building packet failed}
  INVALID_RSP_CNT: {type: UINT64, desc: the count of invalid message}
  OVER_DEVICE_LIMIT_CNT: {type: UINT64, desc: the count when the device number is over limit}
